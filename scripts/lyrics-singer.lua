

--[[
 ‚ñà‚ñà‚ñì   ‚ñì‚ñà‚ñà   ‚ñà‚ñà‚ñì ‚ñà‚ñà‚ñÄ‚ñà‚ñà‚ñà   ‚ñà‚ñà‚ñì ‚ñÑ‚ñà‚ñà‚ñà‚ñà‚ñÑ    ‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà              ‚ñÑ‚ñÑ‚ñÑ‚ñÑ    ‚ñí‚ñà‚ñà‚ñà‚ñà‚ñà  ‚ñÑ‚ñÑ‚ñÑ‚ñà‚ñà‚ñà‚ñà‚ñà‚ñì
‚ñì‚ñà‚ñà‚ñí    ‚ñí‚ñà‚ñà  ‚ñà‚ñà‚ñí‚ñì‚ñà‚ñà ‚ñí ‚ñà‚ñà‚ñí‚ñì‚ñà‚ñà‚ñí‚ñí‚ñà‚ñà‚ñÄ ‚ñÄ‚ñà  ‚ñí‚ñà‚ñà    ‚ñí             ‚ñì‚ñà‚ñà‚ñà‚ñà‚ñà‚ñÑ ‚ñí‚ñà‚ñà‚ñí  ‚ñà‚ñà‚ñí‚ñì  ‚ñà‚ñà‚ñí ‚ñì‚ñí
‚ñí‚ñà‚ñà‚ñë     ‚ñí‚ñà‚ñà ‚ñà‚ñà‚ñë‚ñì‚ñà‚ñà ‚ñë‚ñÑ‚ñà ‚ñí‚ñí‚ñà‚ñà‚ñí‚ñí‚ñì‚ñà    ‚ñÑ ‚ñë ‚ñì‚ñà‚ñà‚ñÑ               ‚ñí‚ñà‚ñà‚ñí ‚ñÑ‚ñà‚ñà‚ñí‚ñà‚ñà‚ñë  ‚ñà‚ñà‚ñí‚ñí ‚ñì‚ñà‚ñà‚ñë ‚ñí‚ñë
‚ñí‚ñà‚ñà‚ñë     ‚ñë ‚ñê‚ñà‚ñà‚ñì‚ñë‚ñí‚ñà‚ñà‚ñÄ‚ñÄ‚ñà‚ñÑ  ‚ñë‚ñà‚ñà‚ñë‚ñí‚ñì‚ñì‚ñÑ ‚ñÑ‚ñà‚ñà‚ñí  ‚ñí   ‚ñà‚ñà‚ñí            ‚ñí‚ñà‚ñà‚ñë‚ñà‚ñÄ  ‚ñí‚ñà‚ñà   ‚ñà‚ñà‚ñë‚ñë ‚ñì‚ñà‚ñà‚ñì ‚ñë 
‚ñë‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñí ‚ñë ‚ñà‚ñà‚ñí‚ñì‚ñë‚ñë‚ñà‚ñà‚ñì ‚ñí‚ñà‚ñà‚ñí‚ñë‚ñà‚ñà‚ñë‚ñí ‚ñì‚ñà‚ñà‚ñà‚ñÄ ‚ñë‚ñí‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñí‚ñí            ‚ñë‚ñì‚ñà  ‚ñÄ‚ñà‚ñì‚ñë ‚ñà‚ñà‚ñà‚ñà‚ñì‚ñí‚ñë  ‚ñí‚ñà‚ñà‚ñí ‚ñë 
‚ñë ‚ñí‚ñë‚ñì  ‚ñë  ‚ñà‚ñà‚ñí‚ñí‚ñí ‚ñë ‚ñí‚ñì ‚ñë‚ñí‚ñì‚ñë‚ñë‚ñì  ‚ñë ‚ñë‚ñí ‚ñí  ‚ñë‚ñí ‚ñí‚ñì‚ñí ‚ñí ‚ñë            ‚ñë‚ñí‚ñì‚ñà‚ñà‚ñà‚ñÄ‚ñí‚ñë ‚ñí‚ñë‚ñí‚ñë‚ñí‚ñë   ‚ñí ‚ñë‚ñë   
‚ñë ‚ñë ‚ñí  ‚ñë‚ñì‚ñà‚ñà ‚ñë‚ñí‚ñë   ‚ñë‚ñí ‚ñë ‚ñí‚ñë ‚ñí ‚ñë  ‚ñë  ‚ñí   ‚ñë ‚ñë‚ñí  ‚ñë ‚ñë            ‚ñí‚ñë‚ñí   ‚ñë   ‚ñë ‚ñí ‚ñí‚ñë     ‚ñë    
  ‚ñë ‚ñë   ‚ñí ‚ñí ‚ñë‚ñë    ‚ñë‚ñë   ‚ñë  ‚ñí ‚ñë‚ñë        ‚ñë  ‚ñë  ‚ñë               ‚ñë    ‚ñë ‚ñë ‚ñë ‚ñë ‚ñí    ‚ñë      
    ‚ñë  ‚ñë‚ñë ‚ñë        ‚ñë      ‚ñë  ‚ñë ‚ñë            ‚ñë               ‚ñë          ‚ñë ‚ñë           
        ‚ñë ‚ñë                  ‚ñë                                   ‚ñë                   

VERSION 1.05 
MADE BY GARFIELD THE CAT ON V3RMILLION 
SCRIPTBLOX ACCOUNT: https://scriptblox.com/u/garfieldcatto


***PLEASE DO NOT MODIFY UNDER THIS*** 
]]




--\\ Anti-AFK 
spawn(function()
	for i,v in pairs(getconnections(game.Players.LocalPlayer.Idled)) do
		v:Disable()
	end
end)

--\\ Set up logs 
if shared.botLogs == true then 
	rconsoleclear()
	rconsolename("Lyrics Bot Logs")
	rconsoleprint('@@WHITE@@')
	rconsoleprint("Lyrics Bot v1.05 waiting...\n")
end

shared.inUse = false -- ‚ö†Ô∏è DO NOT MODIFY THIS 
shared.songCount = 0 

--\\ Send first tooltip 
if shared.botTooltip == true then 
	game:GetService("ReplicatedStorage").DefaultChatSystemChatEvents.SayMessageRequest:FireServer("ü§ñ Hello! I'm a robot that was built with an API that allows me access to millions of songs! Use the command ;lyrics [song name] to see if I can sing your favorite songs.", "All")
end

spawn(function() -- \\ Bot Loop Tooltip
	while wait(shared.botTooltipDelay) do 
		if shared.botTooltip == true and shared.inUse == false then 
			if math.random(1,10) == 10 then 
				game:GetService("ReplicatedStorage").DefaultChatSystemChatEvents.SayMessageRequest:FireServer("ü§ñ Fun fact: Did you know that this script was made by a user called 'garfieldcatto'?.", "All")
			else
				game:GetService("ReplicatedStorage").DefaultChatSystemChatEvents.SayMessageRequest:FireServer("ü§ñ Hello! I'm a robot that was built with an API that allows me access to millions of songs! Use the command ;lyrics [song name] to see if I can sing your favorite songs.", "All")
			end
		end
	end
end)



game.Players.PlayerChatted:Connect(function(PlayerChatType, sender, message, recipient)
	if string.match(message, ";lyrics") then 
		--\\ setup for api search 
		local foundCommand = message 
		local songName = tostring(string.gsub(message, ";lyrics ", ""))
		local songRequester = sender 
		if shared.botLogs == true then 
			rconsoleprint('@@YELLOW@@')
			rconsoleprint("\nFound command: '"..tostring(message).."'. Requested by "..tostring(sender))
		end
		
		
		
		--\\ make sure bot isn't already in use 
		if shared.inUse == false then 
			--\\ do api search
			if songName ~= nil and not string.match(songName, "#") then 
				shared.inUse = true
				--\\ Notify User  
				game.StarterGui:SetCore("SendNotification", {
					Title = "üü° Bot Notification"; 
					Text = "The bot is now in use and unable to get lyrics requests.";
					Icon = ""; 
					Duration = 5; 
				})
				game.StarterGui:SetCore("SendNotification", {
					Title = "üü¢ Bot Notification"; 
					Text = "Currently singing song "..tostring(songName).." requested by "..tostring(songRequester)..".";
					Icon = ""; 
					Duration = 5; 
				})
				-- delay 
				wait(0.5)
				-- announce current song 
				game:GetService("ReplicatedStorage").DefaultChatSystemChatEvents.SayMessageRequest:FireServer("ü§ñ Attemping to sing song '"..tostring(songName).."' requested by "..tostring(songRequester)..".", "All")
				if shared.botLogs == true then 
					rconsoleprint('@@YELLOW@@')
					rconsoleprint("\nTesting song "..tostring(songName))
				end
				
				
				local request = game:HttpGet("https://lyrics.flc.bar/search?song=" .. tostring(songName))
				if tostring(request) ~= '{"lyrics":{}}' then 
					if shared.botLogs == true then 
						rconsoleprint('@@GREEN@@')
						rconsoleprint("\nSong valid! Singing song "..tostring(songName))
					end

					local decoded = game.HttpService:JSONDecode(request)

					local lyrics = {}
					for i in decoded.lyrics:gmatch("[^\r\n]+") do
						table.insert(lyrics, i)
					end
					
					-- Print out lyrics 
					if shared.botLogs == true then 
						rconsoleprint('@@LIGHT_CYAN@@')
						rconsoleprint("\n\nRequested Lyrics: \n")
					end
					
					if shared.botLogs == true then 
						rconsoleprint('@@LIGHT_GRAY@@')

					end
					
					for i, v in pairs(lyrics) do
						if shared.botLogs == true then 
							rconsoleprint(v.." ")
						end
						
						shared.songCount = shared.songCount + 3 
					end
					
					shared.songMinutesCount = math.round(shared.songCount/60)
					
					game:GetService("ReplicatedStorage").DefaultChatSystemChatEvents.SayMessageRequest:FireServer("ü§ñ Success! The song was found in my API's libraries. The requested song will last for about "..tostring(shared.songMinutesCount).." minutes. Please keep in mind that I cannot take song requests during my singing time.", "All")
					
					game.StarterGui:SetCore("SendNotification", {
						Title = "üü¢ Bot Notification"; 
						Text = "Song will last for "..shared.songCount.." seconds.";
						Icon = ""; 
						Duration = 5; 
					})
					
					if shared.botLogs == true then 
						rconsoleprint('@@LIGHT_CYAN@@')
						rconsoleprint("\nSong will last for "..shared.songCount.." seconds.")
					end
					
					
					shared.songCount = 0 
					shared.songMinutesCount = 0 
					
					if shared.botLogs == true then 
						rconsoleprint('@@WHITE@@')
						rconsoleprint("\n\nWaiting for song to finish...\n")
					end

					for i, v in pairs(lyrics) do
						wait(shared.sayDelay)
						game:GetService("ReplicatedStorage").DefaultChatSystemChatEvents.SayMessageRequest:FireServer("üéµ | "..v, "All")
					end

					shared.inUse = false 
					-- \\ Notify User 
					game.StarterGui:SetCore("SendNotification", {
						Title = "üü¢ Bot Notification"; 
						Text = "The bot is now free to get lyrics requests.";
						Icon = ""; 
						Duration = 5; 
					})
					if shared.botTooltip == true then 
						wait(0.5) -- or else it fucks itself idk why
						game:GetService("ReplicatedStorage").DefaultChatSystemChatEvents.SayMessageRequest:FireServer("ü§ñ I've finished singing! Type ;lyrics [song name] into the chat to request a song!", "All")
					end
					if shared.botLogs == true then 
						rconsoleprint('@@GREEN@@')
						rconsoleprint("\nBot now clear for more requests!")
					end
				else
					shared.inUse = false 
					game.StarterGui:SetCore("SendNotification", {
						Title = "üü¢ Bot Notification"; 
						Text = "The bot is now free to get lyrics requests.";
						Icon = ""; 
						Duration = 5; 
					})
					game:GetService("ReplicatedStorage").DefaultChatSystemChatEvents.SayMessageRequest:FireServer("ü§ñ I'm sorry, but I couldn't find that song. Please try another one.", "All")
					game.StarterGui:SetCore("SendNotification", {
						Title = "üî¥ Bot Warning"; 
						Text = "Invalid song was requested. Skipping.";
						Icon = ""; 
						Duration = 5; 
					})
					if shared.botLogs == true then 
						rconsoleprint('@@RED@@')
						rconsoleprint("\nInvalid song requested. Song name: "..tostring(songName))
					end
				end
			else -- incase of nil or hashtags 
				wait(0.5)
				game:GetService("ReplicatedStorage").DefaultChatSystemChatEvents.SayMessageRequest:FireServer("ü§ñ You cannot request hashtags, "..tostring(songRequester)..". Try another song.", "All")
				if shared.botLogs == true then 
					rconsoleprint('@@RED@@')
					rconsoleprint("\nInvalid title requested by "..tostring(songRequester))
				end
			end 
		else
			--\\ warn user 
			game.StarterGui:SetCore("SendNotification", {
				Title = "üî¥ Bot Warning"; 
				Text = "A song was requested, however the Bot is currently in use.";
				Icon = ""; 
				Duration = 5; 
			})
			if shared.botLogs == true then 
				rconsoleprint('@@LIGHT_RED@@')
				rconsoleprint("\nSong was requested while bot was in use.")
			end
		end
	end
end)
